
AWSTemplateFormatVersion: 2010-09-09
Transform:
  - 'AWS::Serverless-2016-10-31'
Description: 'CICD Pipeline for all Cirrus applications'
Parameters:
 QSS3BucketName:
    AllowedPattern: '^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$'
    ConstraintDescription: >-
      Quick Start bucket name can include numbers, lowercase letters, uppercase
      letters, and hyphens (-). It cannot start or end with a hyphen (-).
    Default: aws-quickstart
    Description: >-
      S3 bucket name for the Quick Start assets. Quick Start bucket name can
      include numbers, lowercase letters, uppercase letters, and hyphens (-). It
      cannot start or end with a hyphen (-).
    Type: String
 QSS3KeyPrefix:
    AllowedPattern: '^[0-9a-zA-Z-/]*$'
    ConstraintDescription: >-
      Quick Start key prefix can include numbers, lowercase letters, uppercase
      letters, hyphens (-), and forward slash (/).
    Default: quickstart-git2s3/
    Description: >-
      S3 key prefix for the Quick Start assets. Quick Start key prefix can
      include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
 SourceObjectKey:
  Description: 'S3 source artifact'
  Type: String
  Default: sudusan/slack-cicd-demo/master/sudusan_slack-cicd-demo.zip

 ApplicationName:
  Description: 'Name of application'
  Type: String
  Default: myapp

 EnvironmentClass:
  Description: 'Environment being deployed into'
  Type: String
  AllowedValues:
      - 'PRD'
      - 'STG'
       
 ApiSecret:
    Default: ''
    Description: 'gitpull method only. WebHook Secrets for use with GitHub Enterprise
      and GitLab. If a secret is matched IP range authentication is bypassed. Cannot
      contain: , \ "'
    NoEcho: 'true'
    Type: String
 AllowedIps:
    Default: 0.0.0.0/0
    Description: gitpull method only. Comma seperated list of IP CIDR blocks for source
      IP authentication. The Autodesk external IP range is provided as default.
    Type: String
  
Conditions:
  UseAllowedIps: !Not [!Equals [ !Ref AllowedIps, '']]
  UseApiSecret: !Not [!Equals [ !Ref ApiSecret, '']]
Resources:
  # Sns topic to subscribe to approval request lambda function
  ConfigTable:
    Properties:
      AttributeDefinitions:
      - AttributeName: branch
        AttributeType: S
      KeySchema:
      - AttributeName: branch
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
    Type: AWS::DynamoDB::Table
  
  LambdaZipsBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      Tags: []
  CopyZips:
    Type: 'AWS::CloudFormation::CustomResource'
    Properties:
      ServiceToken: !GetAtt 
        - CopyZipsFunction
        - Arn
      DestBucket: !Ref LambdaZipsBucket
      SourceBucket: !Ref QSS3BucketName
      Prefix: !Ref QSS3KeyPrefix
      Objects:
        - functions/packages/CreateSSHKey/lambda.zip
        - functions/packages/DeleteBucketContents/lambda.zip
        - functions/packages/GitPullS3/lambda.zip
        - functions/packages/ZipDl/lambda.zip
  CopyZipsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Path: /
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource:
                  - !Sub 'arn:aws:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*'
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:DeleteObject'
                Resource:
                  - !Sub 'arn:aws:s3:::${LambdaZipsBucket}/${QSS3KeyPrefix}*'
  CopyZipsFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.handler
      Runtime: python2.7
      Role: !GetAtt 
        - CopyZipsRole
        - Arn
      Timeout: 240
      Code:
        ZipFile: !Join 
          - |+

          - - import json
            - import logging
            - import threading
            - import boto3
            - import cfnresponse
            - ''
            - ''
            - 'def copy_objects(source_bucket, dest_bucket, prefix, objects):'
            - '    s3 = boto3.client(''s3'')'
            - '    for o in objects:'
            - '        key = prefix + o'
            - '        copy_source = {'
            - '            ''Bucket'': source_bucket,'
            - '            ''Key'': key'
            - '        }'
            - '        s3.copy_object(CopySource=copy_source, Bucket=dest_bucket, Key=key)'
            - ''
            - ''
            - 'def delete_objects(bucket, prefix, objects):'
            - '    s3 = boto3.client(''s3'')'
            - '    objects = {''Objects'': [{''Key'': prefix + o} for o in objects]}'
            - '    s3.delete_objects(Bucket=bucket, Delete=objects)'
            - ''
            - ''
            - 'def timeout(event, context):'
            - '    logging.error(''Execution is about to time out, sending failure response to CloudFormation'')'
            - '    cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)'
            - ''
            - ''
            - 'def handler(event, context):'
            - '    # make sure we send a failure to CloudFormation if the function is going to timeout'
            - '    timer = threading.Timer((context.get_remaining_time_in_millis() / 1000.00) - 0.5, timeout, args=[event, context])'
            - '    timer.start()'
            - ''
            - '    print(''Received event: %s'' % json.dumps(event))'
            - '    status = cfnresponse.SUCCESS'
            - '    try:'
            - '        source_bucket = event[''ResourceProperties''][''SourceBucket'']'
            - '        dest_bucket = event[''ResourceProperties''][''DestBucket'']'
            - '        prefix = event[''ResourceProperties''][''Prefix'']'
            - '        objects = event[''ResourceProperties''][''Objects'']'
            - '        if event[''RequestType''] == ''Delete'':'
            - '            delete_objects(dest_bucket, prefix, objects)'
            - '        else:'
            - '            copy_objects(source_bucket, dest_bucket, prefix, objects)'
            - '    except Exception as e:'
            - '        logging.error(''Exception: %s'' % e, exc_info=True)'
            - '        status = cfnresponse.FAILED'
            - '    finally:'
            - '        timer.cancel()'
            - '        cfnresponse.send(event, context, status, {}, None)'
            - ''
  KeyBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      Tags: []
  NestedTemplateBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      Tags: []
  OutputBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref 'AWS::NoValue'
      VersioningConfiguration:
        Status: Enabled
      Tags: []
  KMSKey:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: >-
        git CodePipeline integration, used to encrypt/decrypt ssh keys stored in
        S3
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Sid: Allow access for Key Administrators
            Effect: Allow
            Principal:
              AWS:
                - !Join 
                  - ''
                  - - 'arn:aws:iam::'
                    - !Ref 'AWS::AccountId'
                    - ':root'
            Action:
              - 'kms:Create*'
              - 'kms:Describe*'
              - 'kms:Enable*'
              - 'kms:List*'
              - 'kms:Put*'
              - 'kms:Update*'
              - 'kms:Revoke*'
              - 'kms:Disable*'
              - 'kms:Get*'
              - 'kms:Delete*'
              - 'kms:ScheduleKeyDeletion'
              - 'kms:CancelKeyDeletion'
            Resource: '*'
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS:
                - !Join 
                  - ''
                  - - 'arn:aws:iam::'
                    - !Ref 'AWS::AccountId'
                    - ':root'
            Action:
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey*'
              - 'kms:DescribeKey'
            Resource: '*'
          - Sid: Allow attachment of persistent resources
            Effect: Allow
            Principal:
              AWS:
                - !Join 
                  - ''
                  - - 'arn:aws:iam::'
                    - !Ref 'AWS::AccountId'
                    - ':root'
            Action:
              - 'kms:CreateGrant'
              - 'kms:ListGrants'
              - 'kms:RevokeGrant'
            Resource: '*'
            Condition:
              Bool:
                'kms:GrantIsForAWSResource': true
  CreateSSHKeyRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: git2cp-sshkeygen
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource:
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref KeyBucket
                      - /crypto.zip
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                Resource:
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref KeyBucket
                      - /enc_key
              - Effect: Allow
                Action:
                  - 'kms:Encrypt'
                Resource:
                  - !GetAtt 
                    - KMSKey
                    - Arn
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - 'arn:aws:logs:*:*:*'
  CreateSSHKeyLambda:
    DependsOn: CopyZips
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      MemorySize: '128'
      Role: !GetAtt 
        - CreateSSHKeyRole
        - Arn
      Runtime: python2.7
      Timeout: '300'
      Code:
        S3Bucket: !Ref LambdaZipsBucket
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/CreateSSHKey/lambda.zip'
  CreateSSHKey:
    Type: 'AWS::CloudFormation::CustomResource'
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 
        - CreateSSHKeyLambda
        - Arn
      KeyBucket: !Ref KeyBucket
      Region: !Ref 'AWS::Region'
      KMSKey: !Ref KMSKey
  
  DeleteBucketContentsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: git2cp-deletebucketcontents
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource:
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref KeyBucket
                      - /*
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref OutputBucket
                      - /*
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref KeyBucket
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref OutputBucket
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - 'arn:aws:logs:*:*:*'
  
  DeleteBucketContentsLambda:
    DependsOn: CopyZips
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      MemorySize: '128'
      Role: !GetAtt 
        - DeleteBucketContentsRole
        - Arn
      Runtime: python2.7
      Timeout: '300'
      Code:
        S3Bucket: !Ref LambdaZipsBucket
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/DeleteBucketContents/lambda.zip'
  
  DeleteBucketContents:
    Type: 'AWS::CloudFormation::CustomResource'
    Version: '1.0'
    DependsOn:
      - KeyBucket
      - OutputBucket
    Properties:
      ServiceToken: !GetAtt 
        - DeleteBucketContentsLambda
        - Arn
      KeyBucket: !Ref KeyBucket
      OutputBucket: !Ref OutputBucket
  
  GitPullRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: git2cp-gitpull
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'kms:Decrypt'
                Resource:
                  - !GetAtt 
                    - KMSKey
                    - Arn
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                Resource:
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref OutputBucket
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref OutputBucket
                      - /*
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource:
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref KeyBucket
                      - /enc_key
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - 'arn:aws:logs:*:*:*'
  
  GitPullLambda:
    DependsOn: CopyZips
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !GetAtt 
        - GitPullRole
        - Arn
      Runtime: python2.7
      Timeout: 300
      Environment:
        Variables:
          ExcludeGit: 'True'
      Code:
        S3Bucket: !Ref LambdaZipsBucket
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/GitPullS3/lambda.zip'
  
  WebHookRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - >-
          arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Policies:
        - PolicyName: git2cp-webhook
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'lambda:InvokeAsync'
                  - 'lambda:InvokeFunction'
                Resource:
                  - !GetAtt 
                    - GitPullLambda
                    - Arn
  
  
  WebHookApi:
    Properties:
      Body:
        definitions:
          Empty:
            type: object
        info:
          title:
            Fn::Join:
            - ''
            - - G2CP-
              - Ref: AWS::StackName
          version: '2016-07-26T07:34:38Z'
        paths:
          /gitpull:
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                credentials:
                  Fn::GetAtt:
                  - WebHookRole
                  - Arn
                httpMethod: POST
                passthroughBehavior: when_no_templates
                requestParameters:
                  integration.request.header.X-Amz-Invocation-Type: '''Event'''
                requestTemplates:
                  application/json:
                    Fn::Join:
                    - ''
                    - - '#set($allParams = $input.params())

                        '
                      - '{

                        '
                      - '"body-json" : $input.json(''$''),

                        '
                      - '"params" : {

                        '
                      - '#foreach($type in $allParams.keySet())

                        '
                      - '    #set($params = $allParams.get($type))

                        '
                      - '"$type" : {

                        '
                      - '    #foreach($paramName in $params.keySet())

                        '
                      - '    "$paramName" : "$util.escapeJavaScript($params.get($paramName))"

                        '
                      - '        #if($foreach.hasNext),#end

                        '
                      - '    #end

                        '
                      - '}

                        '
                      - '    #if($foreach.hasNext),#end

                        '
                      - '#end

                        '
                      - '},

                        '
                      - '"stage-variables" : {

                        '
                      - '#foreach($key in $stageVariables.keySet())

                        '
                      - '"$key" : "$util.escapeJavaScript($stageVariables.get($key))"

                        '
                      - '    #if($foreach.hasNext),#end

                        '
                      - '#end

                        '
                      - '},

                        '
                      - '"context" : {

                        '
                      - '    "account-id" : "$context.identity.accountId",

                        '
                      - '    "api-id" : "$context.apiId",

                        '
                      - '    "api-key" : "$context.identity.apiKey",

                        '
                      - '    "authorizer-principal-id" : "$context.authorizer.principalId",

                        '
                      - '    "caller" : "$context.identity.caller",

                        '
                      - '    "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",

                        '
                      - '    "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",

                        '
                      - '    "cognito-identity-id" : "$context.identity.cognitoIdentityId",

                        '
                      - '    "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",

                        '
                      - '    "http-method" : "$context.httpMethod",

                        '
                      - '    "stage" : "$context.stage",

                        '
                      - '    "source-ip" : "$context.identity.sourceIp",

                        '
                      - '    "user" : "$context.identity.user",

                        '
                      - '    "user-agent" : "$context.identity.userAgent",

                        '
                      - '    "user-arn" : "$context.identity.userArn",

                        '
                      - '    "request-id" : "$context.requestId",

                        '
                      - '    "resource-id" : "$context.resourceId",

                        '
                      - '    "resource-path" : "$context.resourcePath",

                        '
                      - '    "allowed-ips" : "$stageVariables.allowedips",

                        '
                      - '    "api-secrets" : "$stageVariables.apisecrets",

                        '
                      - '    "key-bucket" : "'
                      - Ref: KeyBucket
                      - '",
                        '
                      - '    "output-bucket" : "$stageVariables.outputbucket",
                        '
                      - '    "public-key" : "'
                      - Ref: CreateSSHKey
                      - '",
                        '
                      - '    "raw-body" : "$util.escapeJavaScript($input.body)"
                        '
                      - '    }
                        '
                      - '}'
                responses:
                  default:
                    statusCode: '200'
                type: aws
                uri:
                  Fn::Join:
                  - ''
                  - - 'arn:aws:apigateway:'
                    - Ref: AWS::Region
                    - :lambda:path//2015-03-31/functions/
                    - Fn::GetAtt:
                      - GitPullLambda
                      - Arn
                    - /invocations
        schemes:
        - https
        securityDefinitions:
          sigv4:
            in: header
            name: Authorization
            type: apiKey
            x-amazon-apigateway-authtype: awsSigv4
        swagger: '2.0'
    Type: AWS::ApiGateway::RestApi


  WebHookApiDeployment:
    Properties:
      RestApiId:
        Ref: WebHookApi
      StageName: DummyStage
    Type: AWS::ApiGateway::Deployment
  WebHookApiProdStage:
    Properties:
      DeploymentId:
        Ref: WebHookApiDeployment
      RestApiId:
        Ref: WebHookApi
      StageName: Prod
      Variables:
        allowedips:
          Fn::If:
          - UseAllowedIps
          - Ref: AllowedIps
          - Ref: AWS::NoValue
        apisecrets:
          Fn::If:
          - UseApiSecret
          - Ref: ApiSecret
          - Ref: AWS::NoValue
        outputbucket:
          Ref: OutputBucket
    Type: AWS::ApiGateway::Stage
 
  UnzipCfnTemplate:
    Type: AWS::Lambda::Function
    Properties:
      Description: This unzips the file into the same bucket.
      Handler: index.lambda_handler
      Role: !GetAtt LambdaServiceRole.Arn
      Runtime: python3.7
      Tags:
        - Key: ApplicationName
          Value: !Ref ApplicationName
        - Key: EnvironmentClass
          Value: !Ref EnvironmentClass
      Timeout: 60
      Environment:
        Variables:
          TEMPLATE_BUCKET: !Ref 'OutputBucket'
          TEMPLATE_BUCKET_KEY: !Ref 'SourceObjectKey'
          TARGET_TEMPLATE_BUCKET: !Ref 'NestedTemplateBucket'
      Code:
        ZipFile: |
          import urllib
          import zipfile
          import boto3
          import io
          import os
          print('Loading function')
          s3 = boto3.client('s3')
          bucket = os.environ['TEMPLATE_BUCKET']
          targetBucket = os.environ['TARGET_TEMPLATE_BUCKET']
          def lambda_handler(event, context):
          #key = urllib.unquote_plus(event['Records'][0]['s3']['object']['key'].encode('utf8'))
            key = os.environ['TEMPLATE_BUCKET_KEY']
            codepipeline = boto3.client('codepipeline')
            try:
              obj = s3.get_object(Bucket=bucket, Key=key)
              putObjects = []
              with io.BytesIO(obj["Body"].read()) as tf:
              # rewind the file
                tf.seek(0)
                # Read the file as a zipfile and process the members
                with zipfile.ZipFile(tf, mode='r') as zipf:
                  for file in zipf.infolist():
                    fileName = file.filename
                    putFile = s3.put_object(Bucket=targetBucket, Key=fileName, Body=zipf.read(file))
                    putObjects.append(putFile)
                    print(putFile)
                    print('success')
              return codepipeline.put_job_success_result(jobId=event["CodePipeline.job"]["id"], currentRevision={'revision':'1', 'changeIdentifier':'1'})
            except:
              return codepipeline.put_job_failure_result(jobId=event["CodePipeline.job"]["id"], failureDetails={'type':'JobFailed','message':'This code failed to complete successfully'})

  # Lambda execution role
  LambdaExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Sid: ''
      Path: /
      Policies:
      - PolicyName: LambdaAccess
        PolicyDocument:
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:GetLogEvents
              Resource:
                - arn:aws:logs:*:*:*
            - Effect: Allow
              Resource: '*'
              Action:
                - 'ssm:Get*'
                - 'ssm:Describe*'
                - 'kms:Decrypt'
                - 'kms:Encrypt'
                - 'kms:DescribeKey'
                - 'kms:Get*'
                - 'codepipeline:*'

  CodePipelineArtifactStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        #LifecycleConfiguration: Fill me in as-needed for backup retention rates.
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        Tags:
        - Key: EnvironmentClass
          Value: !Ref EnvironmentClass
        - Key: ApplicationName
          Value: !Ref ApplicationName
        VersioningConfiguration:
          Status: Enabled
  CodePipelineArtifactStoreBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CodePipelineArtifactStoreBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        -
          Sid: DenyUnencryptedObjectUploads
          Effect: Deny
          Principal: '*'
          Action:
          - s3:PutObject
          Resource: !Join [ '', [ !GetAtt CodePipelineArtifactStoreBucket.Arn, '/master/*' ] ]
          Condition:
            StringNotEquals:
              s3:x-amz-server-side-encryption:
                - "AES256"
                - "aws:kms"
        -
          Sid: DenyInsecureConnections
          Effect: Deny
          Principal: '*'
          Action: s3:*
          Resource: !Join [ '', [ !GetAtt CodePipelineArtifactStoreBucket.Arn, '/*' ] ]
          Condition:
            Bool:
              aws:SecureTransport: false
  
  LambdaServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        -
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AWSCodePipelineCustomActionAccess
        - arn:aws:iam::aws:policy/AWSCodePipelineApproverAccess
      Policies:
      -
        PolicyName: Write-to-S3
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          -
            Effect: Allow
            Action:
            - s3:PutObject
            - s3:PutObjectAcl
            Resource: '*'
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        -
          Effect: Allow
          Principal:
            Service:
            - codepipeline.amazonaws.com
            - cloudformation.amazonaws.com
            - codebuild.amazonaws.com
            - codedeploy.amazonaws.com

          Action: sts:AssumeRole
      Path: /
      Policies:
      -
        PolicyName: AWS-CodePipeline-Service-3
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          -
            Effect: Allow
            Action:
            - codecommit:CancelUploadArchive
            - codecommit:GetBranch
            - codecommit:GetCommit
            - codecommit:GetUploadArchiveStatus
            - codecommit:UploadArchive
            Resource: '*'
          -
            Effect: Allow
            Action:
            - codedeploy:CreateDeployment
            - codedeploy:GetApplicationRevision
            - codedeploy:GetDeployment
            - codedeploy:GetDeploymentConfig
            - codedeploy:RegisterApplicationRevision
            Resource: '*'
          -
            Effect: Allow
            Action:
            - codebuild:BatchGetBuilds
            - codebuild:StartBuild
            Resource: '*'
          -
            Effect: Allow
            Action:
            - devicefarm:ListProjects
            - devicefarm:ListDevicePools
            - devicefarm:GetRun
            - devicefarm:GetUpload
            - devicefarm:CreateUpload
            - devicefarm:ScheduleRun
            Resource: '*'
          -
            Effect: Allow
            Action:
            - lambda:InvokeFunction
            - lambda:ListFunctions
            Resource: '*'
          -
            Effect: Allow
            Action:
            - iam:PassRole
            - iam:CreateServiceLinkedRole
            - iam:CreateRole
            - iam:GetRolePolicy
            - iam:PutRolePolicy
            - iam:DeleteRolePolicy
            - iam:AttachRolePolicy
            - iam:DetachRolePolicy
            - iam:DeleteRole
            - iam:CreateInstanceProfile
            - iam:DeleteInstanceProfile
            - iam:GetInstanceProfile
            - iam:ListInstanceProfiles
            - iam:AddRoleToInstanceProfile
            - iam:RemoveRoleFromInstanceProfile
            Resource: '*'
          -
            Effect: Allow
            Action:
            - elasticbeanstalk:*
            - ec2:*
            - tag:*
            - elasticloadbalancing:*
            - autoscaling:*
            - cloudwatch:*
            - s3:*
            - sns:*
            - cloudformation:*
            - rds:*
            - sqs:*
            - ecs:*
            - route53:*
            - secretsmanager:*
            - ssm:*
            - kms:*
            Resource: '*'
  AppPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Join [ '-', [ !Ref ApplicationName, !Ref EnvironmentClass, 'Pipeline' ] ]
      RoleArn:
        !GetAtt CodePipelineServiceRole.Arn
      Stages:
      -
        Name: Source
        Actions:
        -
          Name: SourceAction
          ActionTypeId:
            Category: Source
            Owner: AWS
            Version: "1"
            Provider: S3
          OutputArtifacts:
            - Name: SourceOutput
          Configuration:
            S3Bucket: !Ref OutputBucket
            S3ObjectKey: !Ref SourceObjectKey
            PollForSourceChanges: true
          RunOrder: 1
      -
        Name: Unzip
        Actions:
        -
          Name: UnzipCFN
          InputArtifacts:
            - Name: SourceOutput   
          ActionTypeId:
            Category: Invoke
            Owner: AWS
            Version: "1"
            Provider: Lambda
          Configuration:
            FunctionName: !Ref UnzipCfnTemplate
          RunOrder: 2
      -
        Name: Approval
        Actions:
        - 
          Name: ApproveOrDeny
          ActionTypeId:
            Category: Approval
            Owner: AWS
            Provider: Manual
            Version: '1'
          RunOrder: 3
      -
        Name: Execute
        Actions:
        - 
          Name: CloudFormation
          InputArtifacts:
            - Name: SourceOutput
          ActionTypeId:
            Category: Deploy
            Owner: AWS
            Provider: CloudFormation
            Version: '1'
          Configuration:
            StackName: !Join [ '-', [ !Ref ApplicationName, 'STG-Stack' ] ]
            ActionMode: CREATE_UPDATE
            Capabilities: CAPABILITY_NAMED_IAM
            RoleArn: !GetAtt CodePipelineServiceRole.Arn
            TemplateConfiguration: SourceOutput::IAC/parameters.json
            TemplatePath: SourceOutput::IAC/application-stack.yml
          RunOrder: 4
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactStoreBucket
    
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess #Lock this down as needed.     
  
    
Outputs:
  GitPullWebHookApi:
    Value:
      Fn::Join:
      - ''
      - - ' https://'
        - Ref: WebHookApi
        - .execute-api.
        - Ref: AWS::Region
        - .amazonaws.com/
        - Ref: WebHookApiProdStage
        - /gitpull
  OutputBucketName:
    Value:
      Ref: OutputBucket
  NestedTemplateBucketName:
    Value:
      Ref: NestedTemplateBucket
  PublicSSHKey:
    Value:
      Ref: CreateSSHKey